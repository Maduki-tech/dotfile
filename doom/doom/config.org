#+Title: Doom Literate Config
#+AUTHOR: David Schlueter
#+PROPERTY: header-args:emacs-lisp :tangle config.el

* BASIC CONFIG
#+begin_src emacs-lisp
;;; config.el -*- lexical-binding: t; -*-

#+end_src

* TODO User Setup
#+BEGIN_SRC emacs-lisp
(setq user-full-name "David"
      user-mail-address "d.schlueter1011@gmail.com")
#+END_SRC

* Style

** Font
#+begin_src emacs-lisp
(setq doom-font (font-spec :family "JetBrainsMono Nerd Font Mono" :size 18 )
      doom-variable-pitch-font (font-spec :family "JetBrainsMono Nerd Font Mono" :size 18))
#+end_src
** Color Theme
#+begin_src emacs-lisp
(setq doom-theme 'catppuccin)
#+end_src
** Editor Setting
#+begin_src emacs-lisp
(setq display-line-numbers-type 'relative)
#+end_src

* Org-mode
** Directory Setup

#+begin_src emacs-lisp
(setq org-directory "~/org/")
(setq org-agenda-files '("~/org/inbox.org"
                         "~/org/tasks.org"
                         "~/org/notes.org"))
(setq org-roam-directory (file-truename "~/org/roam/"))
#+end_src
** Templates
#+begin_src emacs-lisp
(setq org-capture-templates
      '(
        ;; Quick TODO (in tasks.org)
        ("t" "Todo" entry
         (file+headline "~/org/tasks.org" "Inbox")
         "* TODO %?\n  %U\n  %a" :empty-lines 1)

        ;; Quick note (in notes.org)
        ("n" "Note" entry
         (file+headline "~/org/notes.org" "Unsorted")
         "* %?\n  %U\n  %a" :empty-lines 1)

        ;; Capture daily log/journal in inbox.org
        ("j" "Journal" entry
         (file+datetree "~/org/inbox.org")
         "* %?\nEntered on %U\n  %i\n  %a" :empty-lines 1)))
#+end_src

** Org Roam
*** Templates
#+begin_src emacs-lisp
(setq org-roam-capture-templates
      '(("d" "default" plain "%?"
         :if-new (file+head "${slug}.org"
                            "#+title: ${title}\n#+date: %U\n\n")
         :unnarrowed t)))

#+end_src

* Projectile
#+begin_src emacs-lisp
(setq projectile-project-search-path '(("~/personal/" . 2) ("~/.config" . 2)))

#+end_src

* Packages
** TailwindCSS
#+begin_src emacs-lisp
(use-package lsp-tailwindcss
  :ensure t
  :after lsp-mode
  :init
  (setq lsp-tailwindcss-add-on-mode t
        lsp-tailwindcss-server-version "0.14.8"
        lsp-tailwindcss-skip-config-check t))
#+end_src
** Flymake-Eslint
#+begin_src emacs-lisp
(use-package flymake-eslint
  :ensure t
  :config
  ;; If Emacs is compiled with JSON support
  (setq flymake-eslint-prefer-json-diagnostics t)

  (defun lemacs/use-local-eslint ()
    "Set project's `node_modules' binary eslint as first priority.
If nothing is found, keep the default value flymake-eslint set or
your override of `flymake-eslint-executable-name.'"
    (interactive)
    (let* ((root (locate-dominating-file (buffer-file-name) "node_modules"))
           (eslint (and root
                        (expand-file-name "node_modules/.bin/eslint"
                                          root))))
      (when (and eslint (file-executable-p eslint))
        (setq-local flymake-eslint-executable-name eslint)
        (message (format "Found local ESLINT! Setting: %s" eslint))
        (flymake-eslint-enable))))


  (defun lemacs/configure-eslint-with-flymake ()
    (when (or (eq major-mode 'tsx-ts-mode)
	      (eq major-mode 'typescript-ts-mode)
	      (eq major-mode 'typescriptreact-mode))
      (lemacs/use-local-eslint)))

  (add-hook 'eglot-managed-mode-hook #'lemacs/use-local-eslint)

  ;; With older projects without LSP or if eglot fails
  ;; you can call interactivelly M-x lemacs/use-local-eslint RET
  ;; or add a hook like:
  (add-hook 'js-ts-mode-hook #'lemacs/use-local-eslint))
#+end_src

** Org-Roam-UI
#+begin_src emacs-lisp
(use-package! websocket
  :after org-roam)

(use-package! org-roam-ui
  :after org-roam
  :config
  (setq org-roam-ui-sync-theme t
        org-roam-ui-follow t
        org-roam-ui-update-on-save t
        org-roam-ui-open-on-start t))
#+end_src
** Corfu
#+begin_src emacs-lisp
(after! corfu
  ;; RET = accept like IntelliJ
  (define-key corfu-map (kbd "RET") #'corfu-insert)
  (define-key corfu-map (kbd "<return>") #'corfu-insert)
  ;; Shift+RET = newline
  (define-key corfu-map (kbd "S-RET") #'newline)
  (define-key corfu-map (kbd "S-<return>") #'newline)

  ;; Faster LSP Popup
  (setq corfu-auto t
        corfu-auto-delay 0.1
        corfu-auto-prefix 2
        corfu-preselect 'first
        completion-styles '(orderless)
        completion-category-defaults nil
        completion-category-overrides '((lsp-capf (styles orderless)))
        orderless-matching-styles '(orderless-flex)
        )
)
#+end_src
** CopiloT
#+begin_src emacs-lisp
(use-package! copilot
  :hook (prog-mode . copilot-mode)
  :bind (:map copilot-completion-map
              ("<tab>" . 'copilot-accept-completion)
              ("TAB" . 'copilot-accept-completion)
              ("C-TAB" . 'copilot-accept-completion-by-word)
              ("C-<tab>" . 'copilot-accept-completion-by-word)))
#+end_src
* Set Configs
** LSP Mode
#+begin_src emacs-lisp
(after! lsp-mode
  (setq lsp-completion-provider :none
        lsp-completion-enable-additional-text-edit nil
        lsp-completion-show-kind t))
#+end_src
** Scroll Margin
#+begin_src emacs-lisp
(setq scroll-margin 20)
#+end_src
* Remaps
#+begin_src emacs-lisp
(map! :leader
      (:prefix ("s" . "search")
       :desc "Find files in project root" "f" #'projectile-find-file))

;; Formatting
(map! :leader
      (:prefix ("t" . "toggle/tools")
       :desc "Format buffer" "f" #'+format/buffer))

(map! :leader
      (:prefix ("e" . "errors")
       :desc "Show diagnostic at point" "e" #'flymake-show-diagnostic))
#+end_src
